{
    "type": [
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2
    ],
    "data": [
        "    title = 'Double-click to edit table cells',",
        "+ ",
        "    ",
        "+ ",
        "    dt_output('client-side processing (editable = \"cell\")', 'x1'),",
        "+ ",
        "    dt_output('client-side processing (editable = \"row\")', 'x2'),",
        "+ ",
        "    dt_output('client-side processing (editable = \"column\")', 'x3'),",
        "+ ",
        "    dt_output('client-side processing (editable = \"all\")', 'x4'),",
        "+ ",
        "    ",
        "+ ",
        "    dt_output('server-side processing (editable = \"cell\")', 'x5'),",
        "+ ",
        "    dt_output('server-side processing (editable = \"row\")', 'x6'),",
        "+ ",
        "    dt_output('server-side processing (editable = \"column\")', 'x7'),",
        "+ ",
        "    dt_output('server-side processing (editable = \"all\")', 'x8'),",
        "+ ",
        "    ",
        "+ ",
        "    dt_output('server-side processing (no row names)', 'x9'),",
        "+ ",
        "    dt_output('edit rows but disable certain columns (editable = list(target = \"row\", disable = list(columns = c(2, 4, 5))))', 'x10')",
        "+ ",
        "  ),",
        "+ ",
        "  ",
        "+ ",
        "  server = function(input, output, session) {",
        "+ ",
        "    d1 = iris",
        "+ ",
        "    d1$Date = Sys.time() + seq_len(nrow(d1))",
        "+ ",
        "    d10 = d9 = d8 = d7 = d6 = d5 = d4 = d3 = d2 = d1",
        "+ ",
        "    ",
        "+ ",
        "    options(DT.options = list(pageLength = 5))",
        "+ ",
        "    ",
        "+ ",
        "    # client-side processing",
        "+ ",
        "    output$x1 = render_dt(d1, 'cell', FALSE)",
        "+ ",
        "    output$x2 = render_dt(d2, 'row', FALSE)",
        "+ ",
        "    output$x3 = render_dt(d3, 'column', FALSE)",
        "+ ",
        "    output$x4 = render_dt(d4, 'all', FALSE)",
        "+ ",
        "    ",
        "+ ",
        "    observe(str(input$x1_cell_edit))",
        "+ ",
        "    observe(str(input$x2_cell_edit))",
        "+ ",
        "    observe(str(input$x3_cell_edit))",
        "+ ",
        "    observe(str(input$x4_cell_edit))",
        "+ ",
        "    ",
        "+ ",
        "    # server-side processing",
        "+ ",
        "    output$x5 = render_dt(d5, 'cell')",
        "+ ",
        "    output$x6 = render_dt(d6, 'row')",
        "+ ",
        "    output$x7 = render_dt(d7, 'column')",
        "+ ",
        "    output$x8 = render_dt(d8, 'all')",
        "+ ",
        "    ",
        "+ ",
        "    output$x9 = render_dt(d9, 'cell', rownames = FALSE)",
        "+ ",
        "    output$x10 = render_dt(d10, list(target = 'row', disable = list(columns = c(2, 4, 5))))",
        "+ ",
        "    ",
        "+ ",
        "    # edit a single cell",
        "+ ",
        "    proxy5 = dataTableProxy('x5')",
        "+ ",
        "    observeEvent(input$x5_cell_edit, {",
        "+ ",
        "      info = input$x5_cell_edit",
        "+ ",
        "      str(info)  # check what info looks like (a data frame of 3 columns)",
        "+ ",
        "      d5 <<- editData(d5, info)",
        "+ ",
        "      replaceData(proxy5, d5, resetPaging = FALSE)  # important",
        "+ ",
        "      # the above steps can be merged into a single editData() call; see examples below",
        "+ ",
        "    })",
        "+ ",
        "    ",
        "+ ",
        "    # edit a row",
        "+ ",
        "    observeEvent(input$x6_cell_edit, {",
        "+ ",
        "      d6 <<- editData(d6, input$x6_cell_edit, 'x6')",
        "+ ",
        "    })",
        "+ ",
        "    ",
        "+ ",
        "    # edit a column",
        "+ ",
        "    observeEvent(input$x7_cell_edit, {",
        "+ ",
        "      d7 <<- editData(d7, input$x7_cell_edit, 'x7')",
        "+ ",
        "    })",
        "+ ",
        "    ",
        "+ ",
        "    # edit all cells",
        "+ ",
        "    observeEvent(input$x8_cell_edit, {",
        "+ ",
        "      d8 <<- editData(d8, input$x8_cell_edit, 'x8')",
        "+ ",
        "    })",
        "+ ",
        "    ",
        "+ ",
        "    # when the table doesn't contain row names",
        "+ ",
        "    observeEvent(input$x9_cell_edit, {",
        "+ ",
        "      d9 <<- editData(d9, input$x9_cell_edit, 'x9', rownames = FALSE)",
        "+ ",
        "    })",
        "+ ",
        "    ",
        "+ ",
        "    # edit rows but disable columns 2, 4, 5",
        "+ ",
        "    observeEvent(input$x10_cell_edit, {",
        "+ ",
        "      d10 <<- editData(d10, input$x10_cell_edit, 'x10')",
        "+ ",
        "    })",
        "+ ",
        "    ",
        "+ ",
        "  }",
        "+ ",
        ")",
        "\nListening on http://127.0.0.1:3875\n",
        " NULL\n NULL\n NULL\n NULL\n",
        "\n",
        "> ",
        "library(shiny)",
        "> ",
        "library(DT)",
        "> ",
        "",
        "> ",
        "dt_output = function(title, id) {",
        "+ ",
        "  fluidRow(column(",
        "+ ",
        "    12, h1(paste0('Table ', sub('.*?([0-9]+)$', '\\\\1', id), ': ', title)),",
        "+ ",
        "    hr(), DTOutput(id)",
        "+ ",
        "  ))",
        "+ ",
        "}",
        "> ",
        "render_dt = function(data, editable = 'cell', server = TRUE, ...) {",
        "+ ",
        "  renderDT(data, selection = 'none', server = server, editable = editable, ...)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "shinyApp(",
        "+ ",
        "  ui = fluidPage(",
        "+ ",
        "    title = 'Double-click to edit table cells',",
        "+ ",
        "    ",
        "+ ",
        "    dt_output('client-side processing (editable = \"cell\")', 'x1'),",
        "+ ",
        "    dt_output('client-side processing (editable = \"row\")', 'x2'),",
        "+ ",
        "    dt_output('client-side processing (editable = \"column\")', 'x3'),",
        "+ ",
        "    dt_output('client-side processing (editable = \"all\")', 'x4'),",
        "+ ",
        "    ",
        "+ ",
        "    dt_output('server-side processing (editable = \"cell\")', 'x5'),",
        "+ ",
        "    dt_output('server-side processing (editable = \"row\")', 'x6'),",
        "+ ",
        "    dt_output('server-side processing (editable = \"column\")', 'x7'),",
        "+ ",
        "    dt_output('server-side processing (editable = \"all\")', 'x8'),",
        "+ ",
        "    ",
        "+ ",
        "    dt_output('server-side processing (no row names)', 'x9'),",
        "+ ",
        "    dt_output('edit rows but disable certain columns (editable = list(target = \"row\", disable = list(columns = c(2, 4, 5))))', 'x10')",
        "+ ",
        "  ),",
        "+ ",
        "  ",
        "+ ",
        "  server = function(input, output, session) {",
        "+ ",
        "    d1 = iris",
        "+ ",
        "    d1$Date = Sys.time() + seq_len(nrow(d1))",
        "+ ",
        "    d10 = d9 = d8 = d7 = d6 = d5 = d4 = d3 = d2 = d1",
        "+ ",
        "    ",
        "+ ",
        "    options(DT.options = list(pageLength = 5))",
        "+ ",
        "    ",
        "+ ",
        "    # client-side processing",
        "+ ",
        "    output$x1 = render_dt(d1, 'cell', FALSE)",
        "+ ",
        "    output$x2 = render_dt(d2, 'row', FALSE)",
        "+ ",
        "    output$x3 = render_dt(d3, 'column', FALSE)",
        "+ ",
        "    output$x4 = render_dt(d4, 'all', FALSE)",
        "+ ",
        "    ",
        "+ ",
        "    observe(str(input$x1_cell_edit))",
        "+ ",
        "    observe(str(input$x2_cell_edit))",
        "+ ",
        "    observe(str(input$x3_cell_edit))",
        "+ ",
        "    observe(str(input$x4_cell_edit))",
        "+ ",
        "    ",
        "+ ",
        "    # server-side processing",
        "+ ",
        "    output$x5 = render_dt(d5, 'cell')",
        "+ ",
        "    output$x6 = render_dt(d6, 'row')",
        "+ ",
        "    output$x7 = render_dt(d7, 'column')",
        "+ ",
        "    output$x8 = render_dt(d8, 'all')",
        "+ ",
        "    ",
        "+ ",
        "    output$x9 = render_dt(d9, 'cell', rownames = FALSE)",
        "+ ",
        "    output$x10 = render_dt(d10, list(target = 'row', disable = list(columns = c(2, 4, 5))))",
        "+ ",
        "    ",
        "+ ",
        "    # edit a single cell",
        "+ ",
        "    proxy5 = dataTableProxy('x5')",
        "+ ",
        "    observeEvent(input$x5_cell_edit, {",
        "+ ",
        "      info = input$x5_cell_edit",
        "+ ",
        "      str(info)  # check what info looks like (a data frame of 3 columns)",
        "+ ",
        "      d5 <<- editData(d5, info)",
        "+ ",
        "      replaceData(proxy5, d5, resetPaging = FALSE)  # important",
        "+ ",
        "      # the above steps can be merged into a single editData() call; see examples below",
        "+ ",
        "    })",
        "+ ",
        "    ",
        "+ ",
        "    # edit a row",
        "+ ",
        "    observeEvent(input$x6_cell_edit, {",
        "+ ",
        "      d6 <<- editData(d6, input$x6_cell_edit, 'x6')",
        "+ ",
        "    })",
        "+ ",
        "    ",
        "+ ",
        "    # edit a column",
        "+ ",
        "    observeEvent(input$x7_cell_edit, {",
        "+ ",
        "      d7 <<- editData(d7, input$x7_cell_edit, 'x7')",
        "+ ",
        "    })",
        "+ ",
        "    ",
        "+ ",
        "    # edit all cells",
        "+ ",
        "    observeEvent(input$x8_cell_edit, {",
        "+ ",
        "      d8 <<- editData(d8, input$x8_cell_edit, 'x8')",
        "+ ",
        "    })",
        "+ ",
        "    ",
        "+ ",
        "    # when the table doesn't contain row names",
        "+ ",
        "    observeEvent(input$x9_cell_edit, {",
        "+ ",
        "      d9 <<- editData(d9, input$x9_cell_edit, 'x9', rownames = FALSE)",
        "+ ",
        "    })",
        "+ ",
        "    ",
        "+ ",
        "    # edit rows but disable columns 2, 4, 5",
        "+ ",
        "    observeEvent(input$x10_cell_edit, {",
        "+ ",
        "      d10 <<- editData(d10, input$x10_cell_edit, 'x10')",
        "+ ",
        "    })",
        "+ ",
        "    ",
        "+ ",
        "  }",
        "+ ",
        ")",
        "\nListening on http://127.0.0.1:3875\n",
        " NULL\n NULL\n NULL\n NULL\n",
        "\n",
        "> ",
        "library(shiny)",
        "> ",
        "library(DT)",
        "> ",
        "library(RSQLite)",
        "Warning message:\n",
        "package ‘RSQLite’ was built under R version 4.1.3 \n",
        "> ",
        "library(pool)",
        "Error in library(pool) : there is no package called ‘pool’\n",
        "> ",
        "library(shinyjs)",
        "> ",
        "library(uuid)",
        "Warning message:\n",
        "package ‘uuid’ was built under R version 4.1.3 \n",
        "> ",
        "library(dplyr)",
        "> ",
        "",
        "> ",
        "#Create sql lite database",
        "> ",
        "pool <- dbPool(RSQLite::SQLite(), dbname = \"db.sqlite\")",
        "Error in dbPool(RSQLite::SQLite(), dbname = \"db.sqlite\") : \n  could not find function \"dbPool\"\n",
        "> ",
        "",
        "> ",
        "#Create sql lite df",
        "> ",
        "responses_df <- data.frame(row_id = character(),",
        "+ ",
        "                           name = character(),",
        "+ ",
        "                           sex = character(),",
        "+ ",
        "                           age = character(), ",
        "+ ",
        "                           comment = character(),",
        "+ ",
        "                           date = as.Date(character()),",
        "+ ",
        "                           stringsAsFactors = FALSE)",
        "> ",
        "",
        "> ",
        "#Create responses table in sql database",
        "> ",
        "dbWriteTable(pool, \"responses_df\", responses_df, overwrite = FALSE, append = TRUE)",
        "Error in h(simpleError(msg, call)) : \n  error in evaluating the argument 'conn' in selecting a method for function 'dbWriteTable': object 'pool' not found\n",
        "> ",
        "",
        "> ",
        "#Label mandatory fields",
        "> ",
        "labelMandatory <- function(label) {",
        "+ ",
        "  tagList(",
        "+ ",
        "    label,",
        "+ ",
        "    span(\"*\", class = \"mandatory_star\")",
        "+ ",
        "  )",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "appCSS <- \".mandatory_star { color: red; }\"",
        "> ",
        "",
        "> ",
        "# ui",
        "> ",
        "ui <- fluidPage(",
        "+ ",
        "  shinyjs::useShinyjs(),",
        "+ ",
        "  shinyjs::inlineCSS(appCSS),",
        "+ ",
        "  fluidRow(",
        "+ ",
        "    actionButton(\"add_button\", \"Add\", icon(\"plus\")),",
        "+ ",
        "    actionButton(\"edit_button\", \"Edit\", icon(\"edit\")),",
        "+ ",
        "    actionButton(\"copy_button\", \"Copy\", icon(\"copy\")),",
        "+ ",
        "    actionButton(\"delete_button\", \"Delete\", icon(\"trash-alt\"))",
        "+ ",
        "  ),",
        "+ ",
        "  br(),",
        "+ ",
        "  fluidRow(width=\"100%\",",
        "+ ",
        "           dataTableOutput(\"responses_table\", width = \"100%\")",
        "+ ",
        "  )",
        "+ ",
        ")",
        "Warning messages:\n",
        "1: ",
        "In if (styleclass %in% c(\"primary\", \"info\", \"success\", \"warning\",  :",
        "\n ",
        " the condition has length > 1 and only the first element will be used\n",
        "2: ",
        "In if (styleclass %in% c(\"primary\", \"info\", \"success\", \"warning\",  :",
        "\n ",
        " the condition has length > 1 and only the first element will be used\n",
        "3: ",
        "In if (styleclass %in% c(\"primary\", \"info\", \"success\", \"warning\",  :",
        "\n ",
        " the condition has length > 1 and only the first element will be used\n",
        "4: ",
        "In if (styleclass %in% c(\"primary\", \"info\", \"success\", \"warning\",  :",
        "\n ",
        " the condition has length > 1 and only the first element will be used\n",
        "> ",
        "",
        "> ",
        "# Server",
        "> ",
        "server <- function(input, output, session) {",
        "+ ",
        "  ",
        "+ ",
        "  #load responses_df and make reactive to inputs  ",
        "+ ",
        "  responses_df <- reactive({",
        "+ ",
        "    ",
        "+ ",
        "    #make reactive to",
        "+ ",
        "    input$submit",
        "+ ",
        "    input$submit_edit",
        "+ ",
        "    input$copy_button",
        "+ ",
        "    input$delete_button",
        "+ ",
        "    ",
        "+ ",
        "    dbReadTable(pool, \"responses_df\")",
        "+ ",
        "    ",
        "+ ",
        "  })  ",
        "+ ",
        "  ",
        "+ ",
        "  #List of mandatory fields for submission",
        "+ ",
        "  fieldsMandatory <- c(\"name\", \"sex\")",
        "+ ",
        "  ",
        "+ ",
        "  #define which input fields are mandatory ",
        "+ ",
        "  observe({",
        "+ ",
        "    ",
        "+ ",
        "    mandatoryFilled <-",
        "+ ",
        "      vapply(fieldsMandatory,",
        "+ ",
        "             function(x) {",
        "+ ",
        "               !is.null(input[[x]]) && input[[x]] != \"\"",
        "+ ",
        "             },",
        "+ ",
        "             logical(1))",
        "+ ",
        "    mandatoryFilled <- all(mandatoryFilled)",
        "+ ",
        "    ",
        "+ ",
        "    shinyjs::toggleState(id = \"submit\", condition = mandatoryFilled)",
        "+ ",
        "  })",
        "+ ",
        "  ",
        "+ ",
        "  #Form for data entry",
        "+ ",
        "  entry_form <- function(button_id){",
        "+ ",
        "    ",
        "+ ",
        "    showModal(",
        "+ ",
        "      modalDialog(",
        "+ ",
        "        div(id=(\"entry_form\"),",
        "+ ",
        "            tags$head(tags$style(\".modal-dialog{ width:400px}\")),",
        "+ ",
        "            tags$head(tags$style(HTML(\".shiny-split-layout > div {overflow: visible}\"))),",
        "+ ",
        "            fluidPage(",
        "+ ",
        "              fluidRow(",
        "+ ",
        "                splitLayout(",
        "+ ",
        "                  cellWidths = c(\"250px\", \"100px\"),",
        "+ ",
        "                  cellArgs = list(style = \"vertical-align: top\"),",
        "+ ",
        "                  textInput(\"name\", labelMandatory(\"Name\"), placeholder = \"\"),",
        "+ ",
        "                  selectInput(\"sex\", labelMandatory(\"Sex\"), multiple = FALSE, choices = c(\"\", \"M\", \"F\"))",
        "+ ",
        "                ),",
        "+ ",
        "                sliderInput(\"age\", \"Age\", 0, 100, 1, ticks = TRUE, width = \"354px\"),",
        "+ ",
        "                textAreaInput(\"comment\", \"Comment\", placeholder = \"\", height = 100, width = \"354px\"),",
        "+ ",
        "                helpText(labelMandatory(\"\"), paste(\"Mandatory field.\")),",
        "+ ",
        "                actionButton(button_id, \"Submit\")",
        "+ ",
        "              ),",
        "+ ",
        "              easyClose = TRUE",
        "+ ",
        "            )",
        "+ ",
        "        )",
        "+ ",
        "      )",
        "+ ",
        "    )",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  #",
        "+ ",
        "  fieldsAll <- c(\"name\", \"sex\", \"age\", \"comment\")",
        "+ ",
        "  ",
        "+ ",
        "  #save form data into data_frame format",
        "+ ",
        "  formData <- reactive({",
        "+ ",
        "    ",
        "+ ",
        "    formData <- data.frame(row_id = UUIDgenerate(),",
        "+ ",
        "                           name = input$name,",
        "+ ",
        "                           sex = input$sex,",
        "+ ",
        "                           age = input$age, ",
        "+ ",
        "                           comment = input$comment,",
        "+ ",
        "                           date = as.character(format(Sys.Date(), format=\"%d-%m-%Y\")),",
        "+ ",
        "                           stringsAsFactors = FALSE)",
        "+ ",
        "    return(formData)",
        "+ ",
        "    ",
        "+ ",
        "  })",
        "+ ",
        "  ",
        "+ ",
        "  #Add data",
        "+ ",
        "  appendData <- function(data){",
        "+ ",
        "    quary <- sqlAppendTable(pool, \"responses_df\", data, row.names = FALSE)",
        "+ ",
        "    dbExecute(pool, quary)",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  observeEvent(input$add_button, priority = 20,{",
        "+ ",
        "    ",
        "+ ",
        "    entry_form(\"submit\")",
        "+ ",
        "    ",
        "+ ",
        "  })",
        "+ ",
        "  ",
        "+ ",
        "  observeEvent(input$submit, priority = 20,{",
        "+ ",
        "    ",
        "+ ",
        "    appendData(formData())",
        "+ ",
        "    shinyjs::reset(\"entry_form\")",
        "+ ",
        "    removeModal()",
        "+ ",
        "    ",
        "+ ",
        "  })",
        "+ ",
        "  ",
        "+ ",
        "  #delete data",
        "+ ",
        "  deleteData <- reactive({",
        "+ ",
        "    ",
        "+ ",
        "    SQL_df <- dbReadTable(pool, \"responses_df\")",
        "+ ",
        "    row_selection <- SQL_df[input$responses_table_rows_selected, \"row_id\"]",
        "+ ",
        "    ",
        "+ ",
        "    quary <- lapply(row_selection, function(nr){",
        "+ ",
        "      ",
        "+ ",
        "      dbExecute(pool, sprintf('DELETE FROM \"responses_df\" WHERE \"row_id\" == (\"%s\")', nr))",
        "+ ",
        "    })",
        "+ ",
        "  })",
        "+ ",
        "  ",
        "+ ",
        "  observeEvent(input$delete_button, priority = 20,{",
        "+ ",
        "    ",
        "+ ",
        "    if(length(input$responses_table_rows_selected)>=1 ){",
        "+ ",
        "      deleteData()",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "    showModal(",
        "+ ",
        "      ",
        "+ ",
        "      if(length(input$responses_table_rows_selected) < 1 ){",
        "+ ",
        "        modalDialog(",
        "+ ",
        "          title = \"Warning\",",
        "+ ",
        "          paste(\"Please select row(s).\" ),easyClose = TRUE",
        "+ ",
        "        )",
        "+ ",
        "      })",
        "+ ",
        "  })",
        "+ ",
        "  ",
        "+ ",
        "  #copy data",
        "+ ",
        "  unique_id <- function(data){",
        "+ ",
        "    replicate(nrow(data), UUIDgenerate())",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  copyData <- reactive({",
        "+ ",
        "    ",
        "+ ",
        "    SQL_df <- dbReadTable(pool, \"responses_df\")",
        "+ ",
        "    row_selection <- SQL_df[input$responses_table_rows_selected, \"row_id\"] ",
        "+ ",
        "    SQL_df <- SQL_df %>% filter(row_id %in% row_selection)",
        "+ ",
        "    SQL_df$row_id <- unique_id(SQL_df)",
        "+ ",
        "    ",
        "+ ",
        "    quary <- sqlAppendTable(pool, \"responses_df\", SQL_df, row.names = FALSE)",
        "+ ",
        "    dbExecute(pool, quary)",
        "+ ",
        "    ",
        "+ ",
        "  })",
        "+ ",
        "  ",
        "+ ",
        "  observeEvent(input$copy_button, priority = 20,{",
        "+ ",
        "    ",
        "+ ",
        "    if(length(input$responses_table_rows_selected)>=1 ){",
        "+ ",
        "      copyData()",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "    showModal(",
        "+ ",
        "      ",
        "+ ",
        "      if(length(input$responses_table_rows_selected) < 1 ){",
        "+ ",
        "        modalDialog(",
        "+ ",
        "          title = \"Warning\",",
        "+ ",
        "          paste(\"Please select row(s).\" ),easyClose = TRUE",
        "+ ",
        "        )",
        "+ ",
        "      })",
        "+ ",
        "    ",
        "+ ",
        "  })",
        "+ ",
        "  ",
        "+ ",
        "  #edit data",
        "+ ",
        "  observeEvent(input$edit_button, priority = 20,{",
        "+ ",
        "    ",
        "+ ",
        "    SQL_df <- dbReadTable(pool, \"responses_df\")",
        "+ ",
        "    ",
        "+ ",
        "    showModal(",
        "+ ",
        "      if(length(input$responses_table_rows_selected) > 1 ){",
        "+ ",
        "        modalDialog(",
        "+ ",
        "          title = \"Warning\",",
        "+ ",
        "          paste(\"Please select only one row.\" ),easyClose = TRUE)",
        "+ ",
        "      } else if(length(input$responses_table_rows_selected) < 1){",
        "+ ",
        "        modalDialog(",
        "+ ",
        "          title = \"Warning\",",
        "+ ",
        "          paste(\"Please select a row.\" ),easyClose = TRUE)",
        "+ ",
        "      })  ",
        "+ ",
        "    ",
        "+ ",
        "    if(length(input$responses_table_rows_selected) == 1 ){",
        "+ ",
        "      ",
        "+ ",
        "      entry_form(\"submit_edit\")",
        "+ ",
        "      ",
        "+ ",
        "      updateTextInput(session, \"name\", value = SQL_df[input$responses_table_rows_selected, \"name\"])",
        "+ ",
        "      updateSelectInput(session, \"sex\", selected = SQL_df[input$responses_table_rows_selected, \"sex\"])",
        "+ ",
        "      updateSliderInput(session, \"age\", value = SQL_df[input$responses_table_rows_selected, \"age\"])",
        "+ ",
        "      updateTextAreaInput(session, \"comment\", value = SQL_df[input$responses_table_rows_selected, \"comment\"])",
        "+ ",
        "      ",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "  })",
        "+ ",
        "  ",
        "+ ",
        "  observeEvent(input$submit_edit, priority = 20, {",
        "+ ",
        "    ",
        "+ ",
        "    SQL_df <- dbReadTable(pool, \"responses_df\")",
        "+ ",
        "    row_selection <- SQL_df[input$responses_table_row_last_clicked, \"row_id\"] ",
        "+ ",
        "    dbExecute(pool, sprintf('UPDATE \"responses_df\" SET \"name\" = ?, \"sex\" = ?, \"age\" = ?,",
        "+ ",
        "                          \"comment\" = ? WHERE \"row_id\" = (\"%s\")', row_selection), ",
        "+ ",
        "              param = list(input$name,",
        "+ ",
        "                           input$sex,",
        "+ ",
        "                           input$age,",
        "+ ",
        "                           input$comment))",
        "+ ",
        "    removeModal()",
        "+ ",
        "    ",
        "+ ",
        "  })",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  output$responses_table <- DT::renderDataTable({",
        "+ ",
        "    ",
        "+ ",
        "    table <- responses_df() %>% select(-row_id) ",
        "+ ",
        "    names(table) <- c(\"Date\", \"Name\", \"Sex\", \"Age\", \"Comment\")",
        "+ ",
        "    table <- datatable(table, ",
        "+ ",
        "                       rownames = FALSE,",
        "+ ",
        "                       options = list(searching = FALSE, lengthChange = FALSE)",
        "+ ",
        "    )",
        "+ ",
        "    ",
        "+ ",
        "  })",
        "+ ",
        "  ",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Run the application ",
        "> ",
        "shinyApp(ui = ui, server = server)",
        "\nListening on http://127.0.0.1:3875\n",
        "Warning:",
        " Error in h: error in evaluating the argument 'conn' in selecting a method for function 'dbReadTable': object 'pool' not found\n",
        "  108: \u001B[37mselect\u001B[39m\n",
        "",
        "  106: \u001B[34m\u001B[1mexprFunc [#206]\u001B[22m\u001B[39m\n",
        "",
        "  105: \u001B[37mwidgetFunc\u001B[39m\n",
        "",
        "  104: \u001B[37m::\nhtmlwidgets\nshinyRenderWidget\u001B[39m\n",
        "",
        "  103: \u001B[37mfunc\u001B[39m\n",
        "",
        "   90: \u001B[37mrenderFunc\u001B[39m\n",
        "",
        "   89: \u001B[37mrenderFunc\u001B[39m\n",
        "",
        "   85: \u001B[37mrenderFunc\u001B[39m\n",
        "",
        "   84: \u001B[37moutput$responses_table\u001B[39m\n",
        "",
        "    3: \u001B[37mrunApp\u001B[39m\n",
        "",
        "    2: \u001B[37mprint.shiny.appobj\u001B[39m\n",
        "",
        "    1: \u001B[37m<Anonymous>\u001B[39m\n",
        "Warning:",
        " Error in h: error in evaluating the argument 'conn' in selecting a method for function 'dbReadTable': object 'pool' not found\n",
        "  3: \u001B[37mrunApp\u001B[39m\n",
        "",
        "  2: \u001B[37mprint.shiny.appobj\u001B[39m\n",
        "",
        "  1: \u001B[37m<Anonymous>\u001B[39m\n",
        "Warning:",
        " Error in h: error in evaluating the argument 'conn' in selecting a method for function 'dbReadTable': object 'pool' not found\n",
        "  108: \u001B[37mselect\u001B[39m\n",
        "",
        "  106: \u001B[34m\u001B[1mexprFunc [#206]\u001B[22m\u001B[39m\n",
        "",
        "  105: \u001B[37mwidgetFunc\u001B[39m\n",
        "",
        "  104: \u001B[37m::\nhtmlwidgets\nshinyRenderWidget\u001B[39m\n",
        "",
        "  103: \u001B[37mfunc\u001B[39m\n",
        "",
        "   90: \u001B[37mrenderFunc\u001B[39m\n",
        "",
        "   89: \u001B[37mrenderFunc\u001B[39m\n",
        "",
        "   85: \u001B[37mrenderFunc\u001B[39m\n",
        "",
        "   84: \u001B[37moutput$responses_table\u001B[39m\n",
        "",
        "    3: \u001B[37mrunApp\u001B[39m\n",
        "",
        "    2: \u001B[37mprint.shiny.appobj\u001B[39m\n",
        "",
        "    1: \u001B[37m<Anonymous>\u001B[39m\n",
        "Warning:",
        " Error in h: error in evaluating the argument 'conn' in selecting a method for function 'dbReadTable': object 'pool' not found\n",
        "  108: \u001B[37mselect\u001B[39m\n",
        "",
        "  106: \u001B[34m\u001B[1mexprFunc [#206]\u001B[22m\u001B[39m\n",
        "",
        "  105: \u001B[37mwidgetFunc\u001B[39m\n",
        "",
        "  104: \u001B[37m::\nhtmlwidgets\nshinyRenderWidget\u001B[39m\n",
        "",
        "  103: \u001B[37mfunc\u001B[39m\n",
        "",
        "   90: \u001B[37mrenderFunc\u001B[39m\n",
        "",
        "   89: \u001B[37mrenderFunc\u001B[39m\n",
        "",
        "   85: \u001B[37mrenderFunc\u001B[39m\n",
        "",
        "   84: \u001B[37moutput$responses_table\u001B[39m\n",
        "",
        "    3: \u001B[37mrunApp\u001B[39m\n",
        "",
        "    2: \u001B[37mprint.shiny.appobj\u001B[39m\n",
        "",
        "    1: \u001B[37m<Anonymous>\u001B[39m\n",
        "\n",
        "\nRestarting R session...\n\n"
    ]
}