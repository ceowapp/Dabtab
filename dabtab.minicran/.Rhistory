)
)
)
}
server <- function(input, output, session) {
# Need to exclude the buttons from themselves being bookmarked
setBookmarkExclude(c("bookmark1", "bookmark2"))
# Trigger bookmarking with either button
observeEvent(input$bookmark1, {
session$doBookmark()
})
observeEvent(input$bookmark2, {
session$doBookmark()
})
}
enableBookmarking(store = "url")
shinyApp(ui, server)
}
## Only run these examples in interactive sessions
if (interactive()) {
# This example shows how to use multiple bookmark buttons. If you only need
# a single bookmark button, see examples in ?enableBookmarking.
ui <- function(request) {
fluidPage(
tabsetPanel(id = "tabs",
tabPanel("One",
checkboxInput("chk1", "Checkbox 1"),
bookmarkButton(id = "bookmark1")
),
tabPanel("Two",
checkboxInput("chk2", "Checkbox 2"),
bookmarkButton(id = "bookmark2")
)
)
)
}
server <- function(input, output, session) {
# Need to exclude the buttons from themselves being bookmarked
setBookmarkExclude(c("bookmark1", "bookmark2"))
# Trigger bookmarking with either button
observeEvent(input$bookmark1, {
session$doBookmark()
})
observeEvent(input$bookmark2, {
session$doBookmark()
})
}
enableBookmarking(store = "url")
shinyApp(ui, server)
}
## Only run these examples in interactive sessions
if (interactive()) {
# This example shows how to use multiple bookmark buttons. If you only need
# a single bookmark button, see examples in ?enableBookmarking.
ui <- function(request) {
fluidPage(
tabsetPanel(id = "tabs",
tabPanel("One",
checkboxInput("chk1", "Checkbox 1"),
bookmarkButton(id = "bookmark1")
),
tabPanel("Two",
checkboxInput("chk2", "Checkbox 2"),
bookmarkButton(id = "bookmark2")
)
)
)
}
server <- function(input, output, session) {
# Need to exclude the buttons from themselves being bookmarked
setBookmarkExclude(c("bookmark1", "bookmark2"))
# Trigger bookmarking with either button
observeEvent(input$bookmark1, {
session$doBookmark()
})
observeEvent(input$bookmark2, {
session$doBookmark()
})
}
shinyApp(ui, server)
}
library(shiny)
## Only run these examples in interactive sessions
if (interactive()) {
# This example shows how to use multiple bookmark buttons. If you only need
# a single bookmark button, see examples in ?enableBookmarking.
ui <- function(request) {
fluidPage(
tabsetPanel(id = "tabs",
tabPanel("One",
checkboxInput("chk1", "Checkbox 1"),
bookmarkButton(id = "bookmark1")
),
tabPanel("Two",
checkboxInput("chk2", "Checkbox 2"),
bookmarkButton(id = "bookmark2")
)
)
)
}
server <- function(input, output, session) {
# Need to exclude the buttons from themselves being bookmarked
setBookmarkExclude(c("bookmark1", "bookmark2"))
# Trigger bookmarking with either button
observeEvent(input$bookmark1, {
session$doBookmark()
})
observeEvent(input$bookmark2, {
session$doBookmark()
})
}
enableBookmarking(store = "url")
shinyApp(ui, server)
}
runApp('R/test_ui.R')
runApp('test_ui.R')
runApp('R/test_ui.R')
runApp('R/test_ui.R')
runApp('R/test_ui.R')
runApp('R/test_ui.R')
runApp('R/test_ui.R')
runApp('R/test_ui.R')
runApp('R/test_ui.R')
shinyUI(fluidPage(
titlePanel("Application Title"),
navlistPanel(
"Header",
tabPanel("First"),
tabPanel("Second"),
tabPanel("Third")
)
))
<div class="container-fluid">
<h2>Application Title</h2>
<div class="row">
<div class="col-sm-4 well">
<ul class="nav nav-pills nav-stacked">
<li class="navbar-brand">Header</li>
<li class="active">
<a href="#tab-5828-1" data-toggle="tab">First</a>
</li>
<li>
<a href="#tab-5828-2" data-toggle="tab">Second</a>
</li>
<li>
<a href="#tab-5828-3" data-toggle="tab">Third</a>
</li>
</ul>
</div>
<div class="col-sm-8">
<div class="tab-content">
<div class="tab-pane active" id="tab-5828-1"></div>
<div class="tab-pane" id="tab-5828-2"></div>
<div class="tab-pane" id="tab-5828-3"></div>
</div>
</div>
</div>
</div>
runApp('R/test_ui.R')
runApp('R/test_ui.R')
runApp('R/test_ui.R')
runApp('R/test_ui.R')
runApp('R/test_ui.R')
library(shiny)
shinyUI(fluidPage(
title = 'MathJax Examples with in-line equations',
withMathJax(),
# section below allows in-line LaTeX via $ in mathjax. Replace less-than-sign with <
# and grater-than-sign with >
tags$div(HTML("less-than-sign script type='text/x-mathjax-config' greater-than-sign
MathJax.Hub.Config({
tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
less-than-sign /script greater-than-sign
")),
helpText('An irrational number $\\sqrt{2}$
and a fraction $1-\\frac{1}{2}$'),
helpText('and a fact about $\\pi$:$\\frac2\\pi = \\frac{\\sqrt2}2 \\cdot
\\frac{\\sqrt{2+\\sqrt2}}2 \\cdot
\\frac{\\sqrt{2+\\sqrt{2+\\sqrt2}}}2 \\cdots$'),
uiOutput('ex1'),
uiOutput('ex2'),
uiOutput('ex3'),
uiOutput('ex4'),
checkboxInput('ex5_visible', 'Show Example 5', FALSE),
uiOutput('ex5')
))
## server.R
library(shiny)
shinyServer(function(input, output, session) {
output$ex1 <- renderUI({
withMathJax(helpText('Dynamic output 1:  $\\alpha^2$'))
})
output$ex2 <- renderUI({
withMathJax(
helpText('and output 2 $3^2+4^2=5^2$'),
helpText('and output 3 $\\sin^2(\\theta)+\\cos^2(\\theta)=1$')
)
})
output$ex3 <- renderUI({
withMathJax(
helpText('The busy Cauchy distribution
$\\frac{1}{\\pi\\gamma\\,\\left[1 +
\\left(\\frac{x-x_0}{\\gamma}\\right)^2\\right]}\\!$'))
})
output$ex4 <- renderUI({
invalidateLater(5000, session)
x <- round(rcauchy(1), 3)
withMathJax(sprintf("If $X$ is a Cauchy random variable, then
$P(X \\leq %.03f ) = %.03f$", x, pcauchy(x)))
})
output$ex5 <- renderUI({
if (!input$ex5_visible) return()
withMathJax(
helpText('You do not see me initially: $e^{i \\pi} + 1 = 0$')
)
})
})
library(shiny)
shinyUI(fluidPage(
title = 'MathJax Examples with in-line equations',
withMathJax(),
# section below allows in-line LaTeX via $ in mathjax. Replace less-than-sign with <
# and grater-than-sign with >
tags$div(HTML("less-than-sign script type='text/x-mathjax-config' greater-than-sign
MathJax.Hub.Config({
tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
less-than-sign /script greater-than-sign
")),
helpText('An irrational number $\\sqrt{2}$
and a fraction $1-\\frac{1}{2}$'),
helpText('and a fact about $\\pi$:$\\frac2\\pi = \\frac{\\sqrt2}2 \\cdot
\\frac{\\sqrt{2+\\sqrt2}}2 \\cdot
\\frac{\\sqrt{2+\\sqrt{2+\\sqrt2}}}2 \\cdots$'),
uiOutput('ex1'),
uiOutput('ex2'),
uiOutput('ex3'),
uiOutput('ex4'),
checkboxInput('ex5_visible', 'Show Example 5', FALSE),
uiOutput('ex5')
))
## server.R
shinyServer(function(input, output, session) {
output$ex1 <- renderUI({
withMathJax(helpText('Dynamic output 1:  $\\alpha^2$'))
})
output$ex2 <- renderUI({
withMathJax(
helpText('and output 2 $3^2+4^2=5^2$'),
helpText('and output 3 $\\sin^2(\\theta)+\\cos^2(\\theta)=1$')
)
})
output$ex3 <- renderUI({
withMathJax(
helpText('The busy Cauchy distribution
$\\frac{1}{\\pi\\gamma\\,\\left[1 +
\\left(\\frac{x-x_0}{\\gamma}\\right)^2\\right]}\\!$'))
})
output$ex4 <- renderUI({
invalidateLater(5000, session)
x <- round(rcauchy(1), 3)
withMathJax(sprintf("If $X$ is a Cauchy random variable, then
$P(X \\leq %.03f ) = %.03f$", x, pcauchy(x)))
})
output$ex5 <- renderUI({
if (!input$ex5_visible) return()
withMathJax(
helpText('You do not see me initially: $e^{i \\pi} + 1 = 0$')
)
})
})
mat <- matrix(1:12, nrow = 3)
View(mat)
View(mat)
# NOT RUN {
mapply(rep, 1:4, 4:1)
mapply(rep, times = 1:4, x = 4:1)
mapply(rep, times = 1:4, MoreArgs = list(x = 42))
mapply(function(x, y) seq_len(x) + y,
c(a =  1, b = 2, c = 3),  # names from first
c(A = 10, B = 0, C = -10))
word <- function(C, k) paste(rep.int(C, k), collapse = "")
utils::str(mapply(word, LETTERS[1:6], 6:1, SIMPLIFY = FALSE))
View(word)
mapply(function(x, y) seq_len(x) + y,
c(a =  1, b = 2, c = 3),  # names from first
c(A = 10, B = 0, C = -10))
mapply(function(x, y) seq_len(x) + seq_len(y),
c(a =  1, b = 2, c = 3),  # names from first
c(A = 10, B = 0, C = -10))
mapply(function(x, y) seq_len(x) + seq_len(y),
c(a =  1, b = 2, c = 3),  # names from first
c(A = 10, B = 0, C = 10))
mapply(function(x, y) seq_len(x) + seq_len(y),
c(a =  1, b = 2, c = 3),  # names from first
c(A = 10, B = 0))
# Sample data in matrix form
input_matrix <- matrix(c(1:10), nrow = 5, ncol = 2)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(x, y) {
return(x + y)
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- mapply(add, input_matrix[, 1], input_matrix[, 2])
output_matrix  # View the output matrix
# Sample data in matrix form
input_matrix <- matrix(c(1:10), nrow = 5, ncol = 2)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(x, y) {
return(x + y)
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- mapply(add, input_matrix[, 1], input_matrix[, 2])
output_matrix  # View the output matrix
View(input_matrix)
# Sample data in matrix form
input_matrix <- matrix(c(1:10), nrow = 1, ncol = 10)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(x, y) {
return(x + y)
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- mapply(add, input_matrix[, 1], input_matrix[, 2])
output_matrix  # View the output matrix
# Sample data in matrix form
input_matrix <- matrix(c(1:10), nrow = 1, ncol = 10)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(x, y) {
return(x + y)
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- mapply(add, input_matrix[, 1], input_matrix[, input_matrix$ncol])
output_matrix  # View the output matrix
# Sample data in matrix form
input_matrix <- matrix(1:10, nrow = 5, ncol = 2)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(...) {
return(sum(...))  # Using sum to add multiple elements in each row
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- mapply(add, input_matrix[, 1], input_matrix[, ncol(input_matrix)])
output_matrix  # View the output matrix
# Sample data in matrix form
input_matrix <- matrix(1:10, nrow = 1, ncol = 10)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(...) {
return(sum(...))  # Using sum to add multiple elements in each row
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- mapply(add, input_matrix[, 1], input_matrix[, ncol(input_matrix)])
output_matrix  # View the output matrix
# Sample data in matrix form
input_matrix <- matrix(1:10, nrow = 1, ncol = 10)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(...) {
return(sum(...))  # Using sum to add multiple elements in each row
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- apply(add, input_matrix[, 1], input_matrix[, ncol(input_matrix)])
output_matrix  # View the output matrix
# Sample data in matrix form
input_matrix <- matrix(1:10, nrow = 1, ncol = 10)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(...) {
return(sum(...))  # Using sum to add multiple elements in each row
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- apply(input_matrix,1, add)
output_matrix  # View the output matrix
# Sample data in matrix form
input_matrix <- matrix(1:10, nrow = 1, ncol = 10)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(...) {
return(sum(...))  # Using sum to add multiple elements in each row
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- apply(input_matrix,2, add)
output_matrix  # View the output matrix
# Sample data in matrix form
input_matrix <- matrix(1:10, nrow = 1, ncol = 10)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(...) {
return(sum(...))  # Using sum to add multiple elements in each row
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- mapply(add, input_matrix[1, ], input_matrix[ ncol(input_matrix), ])
output_matrix  # View the output matrix
# Sample data in matrix form
input_matrix <- matrix(1:10, nrow = 2, ncol = 5)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(...) {
return(sum(...))  # Using sum to add multiple elements in each row
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- mapply(add, input_matrix[1, ncol(input_matrix)], input_matrix[ 1, ncol(input_matrix)])
output_matrix  # View the output matrix
# Sample data in matrix form
input_matrix <- matrix(1:10, nrow = 2, ncol = 5)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(...) {
return(sum(...))  # Using sum to add multiple elements in each row
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- mapply(add, input_matrix[ , ncol(input_matrix)], input_matrix[ 1, ])
output_matrix  # View the output matrix
# Sample data in matrix form
input_matrix <- matrix(1:10, nrow = 2, ncol = 5)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(...) {
return(sum(...))  # Using sum to add multiple elements in each row
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- mapply(add, input_matrix[1 , ncol(input_matrix)], input_matrix[ 1, ncol(input_matrix)])
output_matrix  # View the output matrix
# Sample data in matrix form
input_matrix <- matrix(1:10, nrow = 2, ncol = 5)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(...) {
return(sum(...))  # Using sum to add multiple elements in each row
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- mapply(sum, input_matrix[1 , ncol(input_matrix)], input_matrix[ 1, ncol(input_matrix)])
output_matrix  # View the output matrix
# Sample data in matrix form
input_matrix <- matrix(1:10, nrow = 5, ncol = 2)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(...) {
return(sum(...))  # Using sum to add multiple elements in each row
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- mapply(add, input_matrix[1 , ncol(input_matrix)], input_matrix[ 1, ncol(input_matrix)])
output_matrix  # View the output matrix
# Sample data in matrix form
input_matrix <- matrix(1:10, nrow = 5, ncol = 2)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(...) {
return(sum(...))  # Using sum to add multiple elements in each row
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- mapply(add, input_matrix[ , 1], input_matrix[ 1, ncol(input_matrix)])
output_matrix  # View the output matrix
# Sample data in matrix form
input_matrix <- matrix(1:10, nrow = 5, ncol = 2)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(...) {
return(sum(...))  # Using sum to add multiple elements in each row
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- mapply(add, input_matrix[ , 1], input_matrix[ , ncol(input_matrix)])
output_matrix  # View the output matrix
# Sample data in matrix form
input_matrix <- matrix(1:10, nrow = 5, ncol = 2)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(...) {
return(sum(...))  # Using sum to add multiple elements in each row
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- mapply(add, input_matrix[ , 1], input_matrix[ , ncol(input_matrix)])
sum(output_matrix)
output_matrix  # View the output matrix
# Sample data in matrix form
input_matrix <- matrix(1:10, nrow = 5, ncol = 2)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(...) {
return(sum(...))  # Using sum to add multiple elements in each row
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- mapply(add, input_matrix[ , 1], input_matrix[ , ncol(input_matrix)])
total <- sum(output_matrix)
total  # View the output matrix
# Sample data in matrix form
input_matrix <- matrix(1:10, nrow = 1, ncol = 7)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(...) {
return(sum(...))  # Using sum to add multiple elements in each row
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- mapply(add, input_matrix[ , 1], input_matrix[ , ncol(input_matrix)])
total <- sum(output_matrix)
total  # View the output matrix
# Sample data in matrix form
input_matrix <- matrix(1:10, nrow = 1, ncol = 10)  # Example 5x2 matrix
input_matrix  # View the input matrix
# Function to add two values
add <- function(...) {
return(sum(...))  # Using sum to add multiple elements in each row
}
# Apply function 'add' row-wise to input_matrix and store the results in output_matrix
output_matrix <- mapply(add, input_matrix[ , 1], input_matrix[ , ncol(input_matrix)])
total <- sum(output_matrix)
total  # View the output matrix
